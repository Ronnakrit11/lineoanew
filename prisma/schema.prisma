// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// ======= Authentication & User Models =======
model UserProfile {
  userId        String
  platform      Platform
  displayName   String
  pictureUrl    String?
  statusMessage String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([userId, platform])
  @@index([platform, updatedAt])
}

// ======= LINE Integration Models =======
model LineAccount {
  id                 String         @id @default(cuid())
  name               String
  channelAccessToken String         @unique
  channelSecret      String
  active             Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  // Relationships with cascading deletes
  conversations      Conversation[]
  quotations        Quotation[]    @relation("LineAccountQuotations")
  invoices          Invoice[]      @relation("LineAccountInvoices")

  @@index([active])
  @@index([createdAt])
}

// ======= Chat & Messaging Models =======
model Conversation {
  id            String       @id @default(cuid())
  platform      Platform
  channelId     String      // Stores chat identifier (user/room/group)
  userId        String      // User who initiated the conversation
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relationships with cascading deletes
  messages      Message[]   @relation("ConversationMessages")
  lineAccount   LineAccount? @relation(fields: [lineAccountId], references: [id], onDelete: Cascade)
  lineAccountId String?

  @@unique([userId, platform, channelId, lineAccountId])
  @@index([platform, updatedAt])
  @@index([userId, platform])
  @@index([lineAccountId, createdAt])
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  sender         SenderType
  timestamp      DateTime     @default(now())
  platform       Platform
  externalId     String?      @unique
  chatType       String?      // Type of chat: 'user', 'group', 'room'
  chatId         String?      // Specific chat identifier
  imageBase64    String?      @db.Text
  
  // Relationships with cascading deletes
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  @@index([conversationId, timestamp])
  @@index([platform, timestamp])
  @@index([externalId])
}

// ======= Document Models =======
model Quotation {
  id            String          @id @default(cuid())
  number        String          @unique
  customerName  String
  total         Float
  status        DocumentStatus  @default(DRAFT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relationships with cascading deletes
  items         QuotationItem[] @relation("QuotationItems")
  lineAccount   LineAccount     @relation("LineAccountQuotations", fields: [lineAccountId], references: [id], onDelete: Cascade)
  lineAccountId String
  invoice       Invoice?        @relation("InvoiceQuotations", fields: [invoiceId], references: [id])
  invoiceId     String?

  // Optimized compound indexes
  @@index([lineAccountId, createdAt(sort: Desc)])
  @@index([lineAccountId, status])
  @@index([status, createdAt])
}

model QuotationItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  total       Float
  
  // Relationship with cascading delete
  quotation   Quotation @relation("QuotationItems", fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String

  @@index([quotationId])
}

model Invoice {
  id            String          @id @default(cuid())
  number        String          @unique
  customerName  String
  total         Float
  status        DocumentStatus  @default(DRAFT)
  dueDate       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relationships with cascading deletes
  items         InvoiceItem[]   @relation("InvoiceItems")
  quotations    Quotation[]     @relation("InvoiceQuotations")
  lineAccount   LineAccount     @relation("LineAccountInvoices", fields: [lineAccountId], references: [id], onDelete: Cascade)
  lineAccountId String

  // Optimized compound indexes
  @@index([lineAccountId, createdAt(sort: Desc)])
  @@index([lineAccountId, status])
  @@index([status, dueDate])
}

model InvoiceItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  total       Float
  
  // Relationship with cascading delete
  invoice     Invoice   @relation("InvoiceItems", fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String

  @@index([invoiceId])
}

// ======= Enums =======
enum Platform {
  LINE
  FACEBOOK
}

enum SenderType {
  USER
  BOT
}

enum DocumentStatus {
  DRAFT
  PENDING
  APPROVED
  CANCELLED
}