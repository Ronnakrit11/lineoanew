datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      AdminRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  // ID of admin who created this admin
  
  @@index([username])
  @@index([role])
}

model UserProfile {
  userId        String
  platform      Platform
  displayName   String
  pictureUrl    String?
  statusMessage String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([userId, platform])
  @@index([platform, updatedAt])
}

model LineAccount {
  id                 String         @id @default(cuid())
  name               String
  companyName        String?
  imageUrl           String?
  channelAccessToken String         @unique
  channelSecret      String
  active            Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  conversations     Conversation[]
  quotations       Quotation[]
  invoices         Invoice[]

  @@index([id,name])
  @@index([active])
}

model FacebookPage {
  id           String         @id @default(cuid())
  pageId       String         @unique
  name         String
  accessToken  String
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  conversations Conversation[]

  @@index([pageId])
  @@index([active])
}

model Conversation {
  id            String       @id @default(cuid())
  platform      Platform
  channelId     String      // Stores chat identifier (user/room/group)
  userId        String      // User who initiated the conversation
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  messages      Message[]
  lineAccount   LineAccount? @relation(fields: [lineAccountId], references: [id])
  lineAccountId String?
  facebookPage  FacebookPage? @relation(fields: [facebookPageId], references: [id])
  facebookPageId String?

  @@unique([userId, platform, channelId, lineAccountId, facebookPageId])
  @@index([platform, updatedAt])
  @@index([userId, platform])
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  sender         SenderType
  timestamp      DateTime     @default(now())
  platform       Platform
  externalId     String?      @unique
  chatType       String?      // Type of chat: 'user', 'group', 'room'
  chatId         String?      // Specific chat identifier
  imageBase64    String?      @db.Text  // New field for storing base64 image data
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@index([conversationId, timestamp])
  @@index([platform, timestamp])
  @@index([externalId])
}

model Quotation {
  id            String          @id @default(cuid())
  number        String          @unique
  customerName  String
  total         Float
  status        DocumentStatus @default(DRAFT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  items         QuotationItem[]
  lineAccount   LineAccount    @relation(fields: [lineAccountId], references: [id])
  lineAccountId String
  invoice       Invoice?       @relation(fields: [invoiceId], references: [id])
  invoiceId     String?

  @@index([lineAccountId])
  @@index([createdAt])
  @@index([customerName,total])
}

model QuotationItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  total       Float
  
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String

  @@index([quotationId])
}

model Invoice {
  id            String          @id @default(cuid())
  number        String          @unique
  customerName  String
  total         Float
  status        DocumentStatus @default(DRAFT)
  dueDate       DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  items         InvoiceItem[]
  quotations    Quotation[]
  lineAccount   LineAccount    @relation(fields: [lineAccountId], references: [id])
  lineAccountId String

  @@index([lineAccountId])
  @@index([createdAt])
  @@index([status])
  @@index([dueDate])
}

model InvoiceItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  total       Float
  
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId   String

  @@index([invoiceId])
}

enum AdminRole {
  SUPER_ADMIN
  USER
}

enum Platform {
  LINE
  FACEBOOK
  WIDGET
}

enum SenderType {
  USER
  BOT
}

enum DocumentStatus {
  DRAFT
  PENDING
  APPROVED
  CANCELLED
}